Плагин data_period предназначен для работы с периодами дат и для управления загрузкой данных, соответствующих этим периодам.

Рассмотрим конкретный пример из жизни.
Есть хранилище данных котировок валют ЦБ за последние 10-15 лет. Необходимо автоматически создавать кнопки для просмотра котировок валют на определенные даты или за определенные периоды времени. Стандартный набор кнопок обычно выглядит следующим образом:

[ Завтра ] [ Сегодня ] [ Вчера ] [ 3 дня назад ] [ Неделя ] [ Месяц ] [ Год ] [ Выбрать период ]

На первый взгляд ничего сложного, но могут возникнуть следующие проблемы:
1. Котировки за сегодняшний день есть, а за предыдущие 4 дня нет. Из этого следует, что в нашей стандартной шкале необходимо отключить отображение кнопок [ Вчера ] и [ 3 дня назад ]. 
2. ЦБ всегда отдает котировки валют, соответствующие следующему дню, кроме воскресенья. Например, если сегодня среда, то самые свежие котировки будут на четверг. В этом случае наша стандартная шкала работает правильно. В пятницу мы получим котировки на субботу. Если сегодня воскресенье, то данные по котировкам есть только за предыдущий день, т.е. за субботу, следовательно, нужно отключить кнопки [ Завтра ] и [ Сегодня ]
3. Предположим, что сегодня пятница, а ЦБ отдал котировки не на субботу, а на понедельник. Тогда стандартная шкала не будет соответствовать нашим требованиям, потому что вместо кнопки [ Завтра ] должна быть кнопка [ Через 2 дня ].

Плагин data_period позволяет избежать проблем, перечисленных выше.

Особенности работы плагина.

Все наши стандартные кнопки можно разделить на следующие группы:
1. Конкретные даты - [ Сегодня ], [ 3 дня назад ]
2. Периоды - [ Неделя ], [ Месяц ], [ Год ]
3. Крайние периоды - даты на получение первых котировок и последних котировок
4. Вычисляемые периоды - даты, вычисляемые относительно других периодов
5. Выбор произвольного периода

Для работы с периодами используется класс DataPeriod::Base. Необходимо создать свой класс, унаследованный от DataPeriod::Base, и переопределить в нем метод init_periods.

Класс, подходящий под наши требования относительно кнопок для котировок валют ЦБ, будет выглядеть следующим образом:

class DataPeriod::Basic < DataPeriod::Base
  def init_periods
    period "future"

    period_after "today"
    
    period( "today",
            :title => "Сегодня",
            :date  => date_now )
            
    period_before "today"
    
    period( "3-days-ago",
            :title => "3 дня назад",
            :date  => date_now - 3.days )

    period( "1-week-ago",
            :title => "Неделя",
            :from  => date_now - 1.week )

    period( "1-month-ago",
            :title => "Месяц",
            :from  => date_now - 1.month )

    period( "1-year-ago",
            :title => "Год",
            :from  => date_now - 1.year )

    period( "select",
            :title => "выбрать период" )
  end
end

Необходимо поместить этот класс в папку lib вашего проекта, либо в другое место, где вы храните библиотеки.
Создание экземпляра класса DataPeriod::Basic происходит в контроллере следущим образом:

@period = DataPeriod::Basic.new(CbrCurrencyQuote, :date, params)

В качестве первого аргумента передается класс модели, являющейся источником данных. Вторым аргументом является аттрибут, который содержит информацию о дате. Последним аттрибутом передается хэш с параметрами контроллера.

Для отображения кнопок с периодами необходимо воспользоваться хелпером data_period:

<% data_period(@period) %>

Теперь все необходимые кнопки будут отображаться на запрашиваемой странице.
Для того, чтобы загружать нужные данные, исходя из того, какой в данный момент выбран период, необходимо воспользоваться методом date_range в контроллере. Наш контроллер примет следующий вид:

@period = DataPeriod::Basic.new(CbrCurrencyQuote, :date, params)
CbrCurrencyQuote.find(:all, :conditions => { :date => @period.date_range })

Теперь модель CbrCurrencyQuote будет загружать нужные данные в зависимости от выбранного периода.
Метод date_range объекта @period возращает либо период дат (Range), либо конкретную дату (Date).